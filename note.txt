DATABASE CONFIGURATION AND SETUP USING MONGODB.

MongoDB is a popular NoSQL (non-relational) database designed for scalability, performance, and flexibility. Unlike traditional relational databases, which use tables with rows and columns to store data, MongoDB stores data in flexible, JSON-like documents called BSON (Binary JSON). This allows it to handle a wide variety of data structures and makes it well-suited for modern web applications, big data, and real-time analytics.

Here’s a brief overview of the key concepts in MongoDB:

.1 Documents
Data in MongoDB is stored as documents, which are similar to JSON objects.
Each document is a set of key-value pairs and can contain arrays, nested objects, and other complex data types

how document look like
{
  "_id": ObjectId("5f1b2b8f1e3d2e38a9f8b9f1"),
  "name": "John Doe",
  "age": 30,
  "address": {
    "street": "123 Main St",
    "city": "New York"
  },
  "tags": ["developer", "mongodb"]
}

2. Collections
Collections are groups of documents. You can think of them like tables in relational databases, but they do not enforce a schema.
A collection can store documents with different structures (fields) since MongoDB is schema-less.

3. Databases
A database in MongoDB is a container for collections. Each MongoDB instance can have multiple databases.
A database is typically used for organizing related collections.

5. _id Field
Each document in MongoDB has a special field called _id that uniquely identifies it.
If you don’t specify an _id, MongoDB automatically generates one, which is an ObjectId (a 12-byte identifier).

6. CRUD Operations
MongoDB provides the standard Create, Read, Update, and Delete (CRUD) operations for manipulating data:
Create: Insert new documents into a collection.
Read: Query documents from a collection (e.g., find()).
Update: Modify existing documents (e.g., updateOne()).
Delete: Remove documents from a collection (e.g., deleteOne()).

Key Benefits:
Flexible Schema: No need to predefine a schema, allowing fast and iterative development.

Scalability: Horizontal scaling via sharding, making it suitable for large applications.

Performance: Indexing, in-memory storage, and other optimizations improve query speed.

MongoDB is widely used in modern web development due to its ability to handle large amounts of unstructured or semi-structured data and its scalability features.


PRACTICAL STEPS: 
1.GO TO MONGODB ATLAS AND CREATE AND ACCOUNT THEN LOGIN.
2.WHEN YOU LOGIN YOU CREATE A NEW PROJECT WITH YOUR PROJECT NAME CLICK ON NEXT.
3.MAKE SURE YOU ARE THE PROJECT OWNER AND CLICK ON CREATE PROJECT.
4. CREATE YOUR DATABASE CLUSTER AND CHOOSE FREE VERSION AND CLICK ON CREATE DEPLOYMENT.
5.CHOOSE YOUR USERNAME AND PASSWORD MAKE SURE YOU ARE ABLE TO REMEMEBER YOUR PASSWORD BECAUSE WE WILL USE IT IN OUR PROJECT ENVIRONMENT, PLEASE DONT USE A SPECIAL CASE. CLICK CREATE
6. CLICK NEXT.
7.CHOOSE A CONNECTION METHOD WE WILL USE DRIVER, SO CLICK THE FIRST OPTION.
8. COPY THE INSTALLATION COMMAND NPM I MONGODB AND GO TO YOUR TERMINAL TO INSTALL MONGOBD ALSO INSTALL MONGOOSE. YOU CAN DO THE TWO TOGETHER WITH NPM I MONGODB MONGOOSE.
9.GO BACK TO MONGODB DASHBOARD AND COPY YOUR CONNECTION STRING 
10. BACK TO OUR CODE AT .ENV.DEVELOPEMENT.LOCAL FILE AND WE ADD NEW ENV VARIABLE FOR OUR DATABASE WITHTHE CONNECTION STRING WE COPIED SAVE AS MONGODB_URI.
11. REPLACE PASSWORD HARDCODE WITH YOUR REAL PASSWORD.
12. IN CONFIG ENV.JS FILE WE EXPORTED DB_URI
13. THEN WE CREATED A NEW DATABASE FOLDER AND CREATED A NEW FILE MONGODB.JS THERE WE IMPORTED MONGOOSE AND ALSO IMPORT THE ENVIRONMENT VARIABLE WE NEED WHICH IS DB_URI AAND NODE_ENV.
14. THEN WE DECLARE A FUNCTION TO CONNECT TO DATABASE. AND EXPORT THE FUNCTION.
15. THEN WE HEAD OVER TO APP.JS  AND CALL THE FUNCTION CONNECTTODATABASE AND MAKE SURE IT IS IMPORTED.
16, YOU CAN DOWNLOAD mongodbcompass software and handle your database from there.