 ROUTES and ROUTES TESTING USING INSOMNIA 

 In an Express app, routes allow you to handle different HTTP requests for specific paths. Each route is associated with a HTTP method (GET, POST, PUT, DELETE, etc.) and can trigger specific functionality.

Route Basics
URL Pattern: The path part of the URL that the user accesses in a browser or client (e.g., /, /users, /posts/:id).

HTTP Method: The type of HTTP request (e.g., GET, POST, PUT, DELETE).

Handler Function: A function that defines what happens when a request to that route is made. It receives the incoming request (req) and sends a response (res).

********WE CREATED ROUTES ****
We craeted auth routes for authentication, user routes for users, and subscription routes.

explaining auth route
Router(): This creates a new instance of the router object. A router allows you to define HTTP request methods (like GET, POST, PUT, DELETE) for specific routes.

authRouter: This variable holds the router instance that will be used to define authentication-related routes for signing up, signing in, and logging out.

Defining the Routes:
authRouter.post('/sign-up', handler): This defines a POST route for the /sign-up path.

POST: This is the HTTP method used to submit data (e.g., when a user fills out a registration form).

Path /sign-up: This is the route that users will access when they try to sign up for your application.

Handler function: The callback function receives the req (request) and res (response) objects.

res.status(201): The status code 201 means "Created", indicating that the user has been successfully created in the system.

res.send(): The response will send a JSON object confirming the success of the operation. In this case, { title: 'User signed up successfully' }.


************USING YOUR ROUTES IN APP.JS***
Usage in Main App (e.g., app.js or server.js):
To use this authRouter in your Express application, you would import it and attach it to your main application 

STEP 2: // Use the authRouter for authentication routes
app.use('/auth', authRouter);

app.use('/auth', authRouter): This tells the application to use the authRouter for any requests that start with /auth. For example:

POST /auth/sign-up

POST /auth/sign-in

GET /auth/logout

Summary of Routes:
POST /auth/sign-up: Used for user registration.

POST /auth/sign-in: Used for user login.

GET /auth/logout: Used for logging the user out.

Each route corresponds to an HTTP request type (POST or GET) and a specific action (sign up, sign in, or log out). When the user hits any of these routes, they will get a response indicating the result of their action.


CALL TO ACTION: 
make sure you project is running in terminal.... it should running on http://localhost:3000, append your routes to it, just like this http://localhost:3000/api/v1/subscriptions and see the content display in json format. you can do for users and auths. 

ButTo test your routes properly there are tools you can use, such as postman, insomnia, httpie, bruno. 

(you can introduce one of the tools to your student)
we will use insomnia. i have already done for auth we will test for subscription and users routes.