Authorisation

In the context of Express.js, authorization is the process of determining whether a user has permission to access a specific resource or perform a certain action after they have been authenticated.

Authentication is about verifying who the user is, while authorization is about verifying what the user is allowed to do.

1. Authentication First
Before we get to authorization, authentication must occur. This step verifies who the user is, usually by checking a JWT token (JSON Web Token), session, or OAuth token.

b Role-Based Authorization
Authorization often involves checking the userâ€™s role or permissions to decide if they can access a certain resource or route. You can create a middleware function to check roles.
For example, if you have two roles: admin and user, and only admin users should have access to certain routes:

Key Steps in the Example:
authenticateJWT: Verifies if the user has a valid JWT token.
authorizeAdmin: Ensures that the user is an admin (authorization check based on user role).
Routes: /admin-only requires both authentication and authorization (admin role), while /user-dashboard only requires authentication.

Conclusion
In Express.js:

Authentication verifies the identity of the user (e.g., via JWT).
Authorization ensures that authenticated users can access specific resources based on roles or permissions.
This process helps protect your application and ensures that only authorized users can perform certain actions or access certain parts of your application.

*********************************************************

we created an authmiddleware file this is where we we wrote our authorization middlewre function.

what is middleware?
In the context of web development or software engineering, middleware typically refers to functions that process requests and responses between the client (e.g., a web browser) and the server (e.g., a web application). Middleware can be used to manage tasks such as:

Authentication and Authorization: Verifying if a user is authenticated or if they have the proper permissions to access certain resources.

Logging: Tracking requests or errors for debugging or monitoring purposes.
Data Processing: Modifying or transforming data before it is sent to the client or after it is received from the client.
Error Handling: Catching and managing errors to prevent the application from crashing.


****************************************************

call to action

in Insomnia after creating the controller for users we tried getting users before sign in, it wont work, then we signed in and then try getting all users details but it worked. 

second part:
we created middlewaare authorisation function and pass it to our routes we want to authorise, then we go back to insomia try getting all users now it wont work because we didnt provided token, so we copied the token from the previous login and paste it in the auth where token was provided at insomnia.  Now you will see it work.